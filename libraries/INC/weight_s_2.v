// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="weight_s_2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.218125,HLS_SYN_LAT=393218,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=59,HLS_SYN_LUT=574}" *)

module weight_s_2 (
        ap_clk,
        ap_rst,
        output_V_V_din,
        output_V_V_full_n,
        output_V_V_write,
        weight_V_address0,
        weight_V_ce0,
        weight_V_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
output  [7:0] output_V_V_din;
input   output_V_V_full_n;
output   output_V_V_write;
output  [4:0] weight_V_address0;
output   weight_V_ce0;
input  [7:0] weight_V_q0;

reg output_V_V_write;
reg weight_V_ce0;

reg    output_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten3_reg_480;
reg   [18:0] indvar_flatten1_reg_110;
reg   [12:0] indvar_flatten2_reg_121;
reg   [5:0] indvar_flatten3_reg_132;
reg   [0:0] wkern_reg_143;
reg   [5:0] indvar_flatten_reg_154;
reg   [1:0] pkern_reg_165;
reg   [3:0] pout_reg_176;
wire   [0:0] exitcond_flatten3_fu_187_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] indvar_flatten_next3_fu_193_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] wkern_mid2_fu_351_p3;
wire   [1:0] tmp_4_mid2_fu_385_p3;
reg   [1:0] tmp_4_mid2_reg_494;
wire   [3:0] pout_1_fu_432_p2;
wire   [5:0] indvar_flatten_next_fu_444_p3;
wire   [5:0] indvar_flatten_next1_fu_458_p3;
wire   [12:0] indvar_flatten_next2_fu_472_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [1:0] ap_phi_mux_pkern_phi_fu_169_p4;
wire  signed [63:0] tmp_12_cast_fu_427_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] exitcond_flatten_fu_199_p2;
wire   [0:0] not_exitcond_flatten_fu_205_p2;
wire   [0:0] exitcond_fu_217_p2;
wire   [0:0] exitcond_flatten1_fu_229_p2;
wire   [0:0] exitcond_flatten2_fu_241_p2;
wire   [0:0] exitcond_flatten15_n_fu_253_p2;
wire   [0:0] wkern_mid_fu_211_p2;
wire   [0:0] not_exitcond_flatten_1_fu_259_p2;
wire   [0:0] exitcond_flatten15_m_fu_247_p2;
wire   [0:0] tmp_1_fu_271_p2;
wire   [0:0] not_tmp_1_fu_277_p2;
wire   [0:0] exitcond_mid_fu_223_p2;
wire   [0:0] exitcond_flatten_mid_fu_235_p2;
wire   [0:0] wkern_mid1_fu_265_p2;
wire   [0:0] exitcond_flatten_mid_2_fu_295_p2;
wire   [0:0] tmp_5_fu_307_p2;
wire   [0:0] tmp_2_fu_313_p2;
wire   [0:0] wkern_1_fu_301_p2;
wire   [0:0] tmp_2_mid_fu_283_p2;
wire   [0:0] tmp_2_mid2_fu_327_p3;
wire   [0:0] exitcond_mid1_fu_289_p2;
wire   [0:0] not_exitcond_flatten_2_fu_339_p2;
wire   [1:0] pkern_mid1_fu_319_p3;
wire   [0:0] exitcond_mid2_fu_345_p2;
wire   [0:0] tmp_8_fu_365_p2;
wire   [0:0] tmp_3_fu_371_p2;
wire   [1:0] pkern_1_fu_359_p2;
wire   [3:0] pout_mid2_fu_377_p3;
wire   [5:0] tmp_9_fu_401_p3;
wire   [5:0] tmp_6_cast_fu_397_p1;
wire   [5:0] tmp_s_fu_409_p2;
wire   [5:0] tmp_4_mid2_cast_fu_393_p1;
wire   [5:0] tmp_4_fu_415_p2;
wire   [5:0] tmp_2_mid2_cast_fu_335_p1;
wire   [5:0] tmp_6_fu_421_p2;
wire   [5:0] indvar_flatten_op_fu_438_p2;
wire   [5:0] indvar_flatten13_op_fu_452_p2;
wire   [12:0] indvar_flatten37_op_fu_466_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten1_reg_110 <= indvar_flatten_next3_fu_193_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten1_reg_110 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten2_reg_121 <= indvar_flatten_next2_fu_472_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten2_reg_121 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten3_reg_132 <= indvar_flatten_next1_fu_458_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten3_reg_132 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_154 <= indvar_flatten_next_fu_444_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_154 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_reg_480 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pkern_reg_165 <= tmp_4_mid2_reg_494;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pkern_reg_165 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pout_reg_176 <= pout_1_fu_432_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pout_reg_176 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wkern_reg_143 <= wkern_mid2_fu_351_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        wkern_reg_143 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten3_reg_480 <= exitcond_flatten3_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_fu_187_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_mid2_reg_494 <= tmp_4_mid2_fu_385_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten3_fu_187_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_pkern_phi_fu_169_p4 = tmp_4_mid2_reg_494;
    end else begin
        ap_phi_mux_pkern_phi_fu_169_p4 = pkern_reg_165;
    end
end

always @ (*) begin
    if (((exitcond_flatten3_reg_480 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_V_blk_n = output_V_V_full_n;
    end else begin
        output_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten3_reg_480 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_V_write = 1'b1;
    end else begin
        output_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_V_ce0 = 1'b1;
    end else begin
        weight_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten3_fu_187_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten3_fu_187_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((exitcond_flatten3_reg_480 == 1'd0) & (output_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((exitcond_flatten3_reg_480 == 1'd0) & (output_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((exitcond_flatten3_reg_480 == 1'd0) & (output_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten3_reg_480 == 1'd0) & (output_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten15_m_fu_247_p2 = (not_exitcond_flatten_fu_205_p2 & exitcond_flatten2_fu_241_p2);

assign exitcond_flatten15_n_fu_253_p2 = (exitcond_flatten2_fu_241_p2 ^ 1'd1);

assign exitcond_flatten1_fu_229_p2 = ((indvar_flatten_reg_154 == 6'd24) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_241_p2 = ((indvar_flatten3_reg_132 == 6'd24) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_187_p2 = ((indvar_flatten1_reg_110 == 19'd393216) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_199_p2 = ((indvar_flatten2_reg_121 == 13'd3072) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_2_fu_295_p2 = (not_exitcond_flatten_1_fu_259_p2 & exitcond_flatten_mid_fu_235_p2);

assign exitcond_flatten_mid_fu_235_p2 = (not_exitcond_flatten_fu_205_p2 & exitcond_flatten1_fu_229_p2);

assign exitcond_fu_217_p2 = ((pout_reg_176 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_mid1_fu_289_p2 = (not_exitcond_flatten_1_fu_259_p2 & exitcond_mid_fu_223_p2);

assign exitcond_mid2_fu_345_p2 = (not_exitcond_flatten_2_fu_339_p2 & exitcond_mid1_fu_289_p2);

assign exitcond_mid_fu_223_p2 = (not_exitcond_flatten_fu_205_p2 & exitcond_fu_217_p2);

assign indvar_flatten13_op_fu_452_p2 = (indvar_flatten3_reg_132 + 6'd1);

assign indvar_flatten37_op_fu_466_p2 = (indvar_flatten2_reg_121 + 13'd1);

assign indvar_flatten_next1_fu_458_p3 = ((tmp_1_fu_271_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten13_op_fu_452_p2);

assign indvar_flatten_next2_fu_472_p3 = ((exitcond_flatten_fu_199_p2[0:0] === 1'b1) ? 13'd1 : indvar_flatten37_op_fu_466_p2);

assign indvar_flatten_next3_fu_193_p2 = (indvar_flatten1_reg_110 + 19'd1);

assign indvar_flatten_next_fu_444_p3 = ((tmp_2_fu_313_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_438_p2);

assign indvar_flatten_op_fu_438_p2 = (indvar_flatten_reg_154 + 6'd1);

assign not_exitcond_flatten_1_fu_259_p2 = (exitcond_flatten_fu_199_p2 | exitcond_flatten15_n_fu_253_p2);

assign not_exitcond_flatten_2_fu_339_p2 = (exitcond_flatten_mid_2_fu_295_p2 ^ 1'd1);

assign not_exitcond_flatten_fu_205_p2 = (exitcond_flatten_fu_199_p2 ^ 1'd1);

assign not_tmp_1_fu_277_p2 = (tmp_1_fu_271_p2 ^ 1'd1);

assign output_V_V_din = weight_V_q0;

assign pkern_1_fu_359_p2 = (pkern_mid1_fu_319_p3 + 2'd1);

assign pkern_mid1_fu_319_p3 = ((tmp_2_fu_313_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_pkern_phi_fu_169_p4);

assign pout_1_fu_432_p2 = (pout_mid2_fu_377_p3 + 4'd1);

assign pout_mid2_fu_377_p3 = ((tmp_3_fu_371_p2[0:0] === 1'b1) ? 4'd0 : pout_reg_176);

assign tmp_12_cast_fu_427_p1 = $signed(tmp_6_fu_421_p2);

assign tmp_1_fu_271_p2 = (exitcond_flatten_fu_199_p2 | exitcond_flatten15_m_fu_247_p2);

assign tmp_2_fu_313_p2 = (tmp_5_fu_307_p2 | exitcond_flatten_fu_199_p2);

assign tmp_2_mid2_cast_fu_335_p1 = tmp_2_mid2_fu_327_p3;

assign tmp_2_mid2_fu_327_p3 = ((exitcond_flatten_mid_2_fu_295_p2[0:0] === 1'b1) ? wkern_1_fu_301_p2 : tmp_2_mid_fu_283_p2);

assign tmp_2_mid_fu_283_p2 = (wkern_reg_143 & not_tmp_1_fu_277_p2);

assign tmp_3_fu_371_p2 = (tmp_8_fu_365_p2 | tmp_1_fu_271_p2);

assign tmp_4_fu_415_p2 = (tmp_s_fu_409_p2 + tmp_4_mid2_cast_fu_393_p1);

assign tmp_4_mid2_cast_fu_393_p1 = tmp_4_mid2_fu_385_p3;

assign tmp_4_mid2_fu_385_p3 = ((exitcond_mid2_fu_345_p2[0:0] === 1'b1) ? pkern_1_fu_359_p2 : pkern_mid1_fu_319_p3);

assign tmp_5_fu_307_p2 = (exitcond_flatten_mid_2_fu_295_p2 | exitcond_flatten15_m_fu_247_p2);

assign tmp_6_cast_fu_397_p1 = pout_mid2_fu_377_p3;

assign tmp_6_fu_421_p2 = (tmp_4_fu_415_p2 + tmp_2_mid2_cast_fu_335_p1);

assign tmp_8_fu_365_p2 = (exitcond_mid2_fu_345_p2 | exitcond_flatten_mid_2_fu_295_p2);

assign tmp_9_fu_401_p3 = {{pout_mid2_fu_377_p3}, {2'd0}};

assign tmp_s_fu_409_p2 = (tmp_9_fu_401_p3 - tmp_6_cast_fu_397_p1);

assign weight_V_address0 = tmp_12_cast_fu_427_p1;

assign wkern_1_fu_301_p2 = (wkern_mid1_fu_265_p2 ^ 1'd1);

assign wkern_mid1_fu_265_p2 = (wkern_mid_fu_211_p2 & not_exitcond_flatten_1_fu_259_p2);

assign wkern_mid2_fu_351_p3 = ((exitcond_flatten_mid_2_fu_295_p2[0:0] === 1'b1) ? wkern_1_fu_301_p2 : wkern_mid1_fu_265_p2);

assign wkern_mid_fu_211_p2 = (wkern_reg_143 & not_exitcond_flatten_fu_205_p2);

endmodule //weight_s_2
