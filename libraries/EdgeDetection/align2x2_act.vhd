-- -------------------------------------------------------------------------------
-- This file has been automatically generated by the Caph compiler (version 2.8.4d)
-- from file main.cph, on 2019-05-09 at 13:10:53, by <unknown>
-- For more information, see : http://caph.univ-bpclermont.fr
-- -------------------------------------------------------------------------------

library ieee,caph,work;
use ieee.std_logic_1164.all;
use caph.core.all;
use caph.data_types.all;
use ieee.numeric_std.all;
use work.all;
use work.extfns.all;
use work.edgeDetectionTutorial_globals.all;

entity Align2x2 is
   port (
    soi_empty: in std_logic;
    soi: in std_logic_vector(15 downto 0);
    soi_rd: out std_logic;
    inY_empty: in std_logic;
    inY: in std_logic_vector(7 downto 0);
    inY_rd: out std_logic;
    outY_full: in std_logic;
    outY: out std_logic_vector(7 downto 0);
    outY_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end Align2x2;

architecture FSM of Align2x2 is
    type t_enum5 is (WAIT_W,WAIT_H,WORK);
    signal y : unsigned(15 downto 0);
    signal n_y : unsigned(15 downto 0);
    signal en_y : boolean;
    signal x : unsigned(15 downto 0);
    signal n_x : unsigned(15 downto 0);
    signal en_x : boolean;
    signal height : unsigned(15 downto 0);
    signal n_height : unsigned(15 downto 0);
    signal en_height : boolean;
    signal width : unsigned(15 downto 0);
    signal n_width : unsigned(15 downto 0);
    signal en_width : boolean;
    signal state : t_enum5;
    signal n_state : t_enum5;
    signal en_state : boolean;
begin
  comb: process(soi, soi_empty, inY, inY_empty, outY_full, state, width, height, x, y)
    variable p_fwd : unsigned(7 downto 0);
    variable p_drop : unsigned(7 downto 0);
    variable p_h : unsigned(15 downto 0);
    variable p_w : unsigned(15 downto 0);
  begin
    -- soi.rdy, state=WAIT_W / p_w=soi, state:=WAIT_H, width:=p_w
    if soi_empty='0' and state=WAIT_W then
      p_w := from_std_logic_vector(soi,16);
      soi_rd <= '1';
      n_state <= WAIT_H;
      en_state <= true;
      n_width <= p_w;
      en_width <= true;
      outY <= (others => 'X');
      outY_wr <= '0';
      inY_rd <= '0';
      n_y <= y;
      en_y <= false;
      n_x <= x;
      en_x <= false;
      n_height <= height;
      en_height <= false;
    -- soi.rdy, state=WAIT_H / p_h=soi, state:=WORK, height:=p_h
    elsif soi_empty='0' and state=WAIT_H then
      p_h := from_std_logic_vector(soi,16);
      soi_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_height <= p_h;
      en_height <= true;
      outY <= (others => 'X');
      outY_wr <= '0';
      inY_rd <= '0';
      n_y <= y;
      en_y <= false;
      n_x <= x;
      en_x <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, x = width && y < 1 / p_drop=inY, state:=WORK, x:=0, y:=y+1
    elsif inY_empty='0' and state=WORK and (((x) = (width)) AND ((y) < (to_unsigned(1,16)))) then
      p_drop := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_x <= to_unsigned(0,16);
      en_x <= true;
      n_y <= (y) + (to_unsigned(1,16));
      en_y <= true;
      outY <= (others => 'X');
      outY_wr <= '0';
      soi_rd <= '0';
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, y < 1 / p_drop=inY, state:=WORK, x:=x+1
    elsif inY_empty='0' and state=WORK and ((y) < (to_unsigned(1,16))) then
      p_drop := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_x <= (x) + (to_unsigned(1,16));
      en_x <= true;
      outY <= (others => 'X');
      outY_wr <= '0';
      soi_rd <= '0';
      n_y <= y;
      en_y <= false;
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, x < 1 / p_drop=inY, state:=WORK, x:=x+1
    elsif inY_empty='0' and state=WORK and ((x) < (to_unsigned(1,16))) then
      p_drop := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_x <= (x) + (to_unsigned(1,16));
      en_x <= true;
      outY <= (others => 'X');
      outY_wr <= '0';
      soi_rd <= '0';
      n_y <= y;
      en_y <= false;
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, x = width && y = height, outY.rdy / p_fwd=inY, state:=WAIT_W, x:=0, y:=0, wr(outY,p_fwd)
    elsif inY_empty='0' and state=WORK and (((x) = (width)) AND ((y) = (height))) and outY_full='0' then
      p_fwd := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WAIT_W;
      en_state <= true;
      n_x <= to_unsigned(0,16);
      en_x <= true;
      n_y <= to_unsigned(0,16);
      en_y <= true;
      outY <= std_logic_vector(p_fwd);
      outY_wr <= '1';
      soi_rd <= '0';
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, x = width, outY.rdy / p_fwd=inY, state:=WORK, x:=0, y:=y+1, wr(outY,p_fwd)
    elsif inY_empty='0' and state=WORK and ((x) = (width)) and outY_full='0' then
      p_fwd := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_x <= to_unsigned(0,16);
      en_x <= true;
      n_y <= (y) + (to_unsigned(1,16));
      en_y <= true;
      outY <= std_logic_vector(p_fwd);
      outY_wr <= '1';
      soi_rd <= '0';
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    -- inY.rdy, state=WORK, outY.rdy / p_fwd=inY, state:=WORK, x:=x+1, wr(outY,p_fwd)
    elsif inY_empty='0' and state=WORK and outY_full='0' then
      p_fwd := from_std_logic_vector(inY,8);
      inY_rd <= '1';
      n_state <= WORK;
      en_state <= true;
      n_x <= (x) + (to_unsigned(1,16));
      en_x <= true;
      outY <= std_logic_vector(p_fwd);
      outY_wr <= '1';
      soi_rd <= '0';
      n_y <= y;
      en_y <= false;
      n_height <= height;
      en_height <= false;
      n_width <= width;
      en_width <= false;
    else
      soi_rd <= '0';
      inY_rd <= '0';
      outY_wr <= '0';
      outY <= (others => 'X');
      en_y <= false;
      en_x <= false;
      en_height <= false;
      en_width <= false;
      en_state <= false;
      n_y <= y;
      n_x <= x;
      n_height <= height;
      n_width <= width;
      n_state <= state;
    end if;
  end process;
  seq: process(clock, reset)
  begin
    if (reset='0') then
      y <= "0000000000000000";
      x <= "0000000000000000";
      height <= "0000000000000000";
      width <= "0000000000000000";
      state <= WAIT_W;
    elsif rising_edge(clock) then
      if ( en_y ) then
        y <= n_y after 1 ns;
      end if;
      if ( en_x ) then
        x <= n_x after 1 ns;
      end if;
      if ( en_height ) then
        height <= n_height after 1 ns;
      end if;
      if ( en_width ) then
        width <= n_width after 1 ns;
      end if;
      if ( en_state ) then
        state <= n_state after 1 ns;
      end if;
    end if;
  end process;
end FSM;
