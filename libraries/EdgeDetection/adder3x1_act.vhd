-- -------------------------------------------------------------------------------
-- This file has been automatically generated by the Caph compiler (version 2.8.4d)
-- from file main.cph, on 2019-05-08 at 15:51:51, by <unknown>
-- For more information, see : http://caph.univ-bpclermont.fr
-- -------------------------------------------------------------------------------

library ieee,caph,work;
use ieee.std_logic_1164.all;
use caph.core.all;
use caph.data_types.all;
use ieee.numeric_std.all;
use work.all;
use work.extfns.all;
use work.edgeDetectionTutorial_globals.all;

entity Adder3x1 is
   port (
    opA_empty: in std_logic;
    opA: in std_logic_vector(31 downto 0);
    opA_rd: out std_logic;
    opB_empty: in std_logic;
    opB: in std_logic_vector(31 downto 0);
    opB_rd: out std_logic;
    opC_empty: in std_logic;
    opC: in std_logic_vector(31 downto 0);
    opC_rd: out std_logic;
    sum_full: in std_logic;
    sum: out std_logic_vector(31 downto 0);
    sum_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end Adder3x1;

architecture FSM of Adder3x1 is
begin
  comb: process(opA, opA_empty, opB, opB_empty, opC, opC_empty, sum_full)
    variable p_a : unsigned(31 downto 0);
    variable p_b : unsigned(31 downto 0);
    variable p_c : unsigned(31 downto 0);
  begin
    -- opC.rdy, opB.rdy, opA.rdy, sum.rdy / p_c=opC, p_b=opB, p_a=opA, wr(sum,p_a+p_b+p_c)
    if opC_empty='0' and opB_empty='0' and opA_empty='0' and sum_full='0' then
      p_c := from_std_logic_vector(opC,32);
      opC_rd <= '1';
      p_b := from_std_logic_vector(opB,32);
      opB_rd <= '1';
      p_a := from_std_logic_vector(opA,32);
      opA_rd <= '1';
      sum <= std_logic_vector(((p_a) + (p_b)) + (p_c));
      sum_wr <= '1';
    else
      opA_rd <= '0';
      opB_rd <= '0';
      opC_rd <= '0';
      sum_wr <= '0';
      sum <= (others => 'X');
    end if;
  end process;
  seq: process(clock, reset)
  begin
    if (reset='0') then
    elsif rising_edge(clock) then
    end if;
  end process;
end FSM;
