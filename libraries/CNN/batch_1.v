// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="batch_1,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.675000,HLS_SYN_LAT=1976605,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=3,HLS_SYN_FF=525,HLS_SYN_LUT=889}" *)

module batch_1 (
        ap_clk,
        ap_rst_n,
        input_V_V_dout,
        input_V_V_empty_n,
        input_V_V_read,
        output_0_V_V_din,
        output_0_V_V_full_n,
        output_0_V_V_write,
        output_1_V_V_din,
        output_1_V_V_full_n,
        output_1_V_V_write,
        output_2_V_V_din,
        output_2_V_V_full_n,
        output_2_V_V_write,
        output_3_V_V_din,
        output_3_V_V_full_n,
        output_3_V_V_write
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_V_V_dout;
input   input_V_V_empty_n;
output   input_V_V_read;
output  [15:0] output_0_V_V_din;
input   output_0_V_V_full_n;
output   output_0_V_V_write;
output  [15:0] output_1_V_V_din;
input   output_1_V_V_full_n;
output   output_1_V_V_write;
output  [15:0] output_2_V_V_din;
input   output_2_V_V_full_n;
output   output_2_V_V_write;
output  [15:0] output_3_V_V_din;
input   output_3_V_V_full_n;
output   output_3_V_V_write;

reg input_V_V_read;
reg output_0_V_V_write;
reg output_1_V_V_write;
reg output_2_V_V_write;
reg output_3_V_V_write;

reg    ap_rst_n_inv;
wire   [6:0] running_mean_address0;
reg    running_mean_ce0;
wire   [7:0] running_mean_q0;
wire   [6:0] running_std_address0;
reg    running_std_ce0;
wire   [8:0] running_std_q0;
wire   [6:0] weight_address0;
reg    weight_ce0;
wire   [8:0] weight_q0;
wire   [6:0] bias_address0;
reg    bias_ce0;
wire   [3:0] bias_q0;
reg    input_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
reg    output_0_V_V_blk_n;
wire    ap_CS_fsm_state38;
reg    output_1_V_V_blk_n;
reg    output_2_V_V_blk_n;
reg    output_3_V_V_blk_n;
wire   [4:0] hin_1_fu_287_p2;
reg   [4:0] hin_1_reg_615;
wire    ap_CS_fsm_state2;
wire   [4:0] win_1_fu_299_p2;
reg   [4:0] win_1_reg_623;
wire    ap_CS_fsm_state3;
wire   [7:0] pin_1_fu_311_p2;
reg   [7:0] pin_1_reg_631;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_305_p2;
reg   [8:0] std_V_reg_656;
reg   [8:0] scale_V_reg_661;
reg   [3:0] p_Val2_4_reg_666;
wire   [16:0] p_Val2_2_fu_333_p2;
reg   [16:0] p_Val2_2_reg_671;
wire    ap_CS_fsm_state6;
wire   [25:0] grp_fu_353_p2;
reg   [25:0] r_V_reg_686;
wire    ap_CS_fsm_state35;
wire   [34:0] p_Val2_3_fu_365_p2;
reg   [34:0] p_Val2_3_reg_691;
wire    ap_CS_fsm_state36;
reg   [0:0] tmp_11_reg_696;
reg   [0:0] signbit_reg_701;
wire    ap_CS_fsm_state37;
wire   [15:0] p_Val2_7_fu_424_p2;
reg   [15:0] p_Val2_7_reg_707;
wire   [0:0] newsignbit_fu_430_p3;
reg   [0:0] newsignbit_reg_713;
wire   [0:0] carry_fu_444_p2;
reg   [0:0] carry_reg_718;
wire   [0:0] Range1_all_ones_fu_484_p2;
reg   [0:0] Range1_all_ones_reg_723;
wire   [0:0] Range1_all_zeros_fu_490_p2;
reg   [0:0] Range1_all_zeros_reg_728;
wire   [0:0] p_38_i_fu_516_p2;
reg   [0:0] p_38_i_reg_733;
wire   [0:0] brmerge40_demorgan_i_fu_522_p2;
reg   [0:0] brmerge40_demorgan_i_reg_739;
reg   [4:0] hin_reg_248;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond2_fu_293_p2;
reg   [4:0] win_reg_259;
wire   [0:0] exitcond1_fu_281_p2;
reg   [7:0] pin_reg_270;
reg    ap_block_state38;
wire   [63:0] tmp_fu_317_p1;
wire   [15:0] out_V_fu_600_p3;
wire  signed [16:0] tmp_2_fu_325_p1;
wire   [16:0] tmp_3_fu_329_p1;
wire   [24:0] tmp_6_fu_339_p3;
wire  signed [25:0] grp_fu_353_p0;
wire   [9:0] grp_fu_353_p1;
wire  signed [25:0] p_Val2_3_fu_365_p0;
wire   [8:0] p_Val2_3_fu_365_p1;
wire   [11:0] tmp_4_fu_379_p3;
wire  signed [34:0] tmp_4_cast_fu_386_p1;
wire   [34:0] p_Val2_5_fu_390_p2;
wire   [15:0] p_Val2_6_fu_403_p4;
wire   [15:0] tmp_8_fu_413_p1;
wire   [0:0] tmp_12_fu_416_p3;
wire   [0:0] tmp_9_fu_438_p2;
wire   [9:0] tmp_7_fu_458_p4;
wire   [10:0] tmp_1_fu_474_p4;
wire   [0:0] tmp_14_fu_450_p3;
wire   [0:0] Range2_all_ones_fu_468_p2;
wire   [0:0] tmp_s_fu_496_p2;
wire   [0:0] p_41_i_fu_502_p2;
wire   [0:0] deleted_ones_fu_508_p3;
wire   [0:0] deleted_zeros_fu_528_p3;
wire   [0:0] p_not_i_fu_533_p2;
wire   [0:0] brmerge_i_fu_539_p2;
wire   [0:0] tmp_5_fu_544_p2;
wire   [0:0] tmp1_demorgan_fu_555_p2;
wire   [0:0] tmp1_fu_559_p2;
wire   [0:0] underflow_fu_565_p2;
wire   [0:0] overflow_fu_549_p2;
wire   [0:0] tmp2_fu_576_p2;
wire   [0:0] brmerge_i_i_fu_570_p2;
wire   [0:0] underflow_not_fu_581_p2;
wire   [15:0] p_Val2_7_mux_fu_586_p3;
wire   [15:0] p_Val2_7_7_fu_593_p3;
reg    grp_fu_353_ap_start;
wire    grp_fu_353_ap_done;
reg   [37:0] ap_NS_fsm;
wire   [25:0] grp_fu_353_p10;
wire   [34:0] p_Val2_3_fu_365_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
end

batch_1_running_mbkb #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
running_mean_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(running_mean_address0),
    .ce0(running_mean_ce0),
    .q0(running_mean_q0)
);

batch_1_running_std #(
    .DataWidth( 9 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
running_std_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(running_std_address0),
    .ce0(running_std_ce0),
    .q0(running_std_q0)
);

batch_1_weight #(
    .DataWidth( 9 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(weight_address0),
    .ce0(weight_ce0),
    .q0(weight_q0)
);

batch_1_bias #(
    .DataWidth( 4 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bias_address0),
    .ce0(bias_ce0),
    .q0(bias_q0)
);

batch_1_sdiv_26s_cud #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
batch_1_sdiv_26s_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_353_ap_start),
    .done(grp_fu_353_ap_done),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .ce(1'b1),
    .dout(grp_fu_353_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        hin_reg_248 <= hin_1_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        hin_reg_248 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_293_p2 == 1'd0))) begin
        pin_reg_270 <= 8'd0;
    end else if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        pin_reg_270 <= pin_1_reg_631;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_281_p2 == 1'd0))) begin
        win_reg_259 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_305_p2 == 1'd1))) begin
        win_reg_259 <= win_1_reg_623;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        Range1_all_ones_reg_723 <= Range1_all_ones_fu_484_p2;
        Range1_all_zeros_reg_728 <= Range1_all_zeros_fu_490_p2;
        brmerge40_demorgan_i_reg_739 <= brmerge40_demorgan_i_fu_522_p2;
        carry_reg_718 <= carry_fu_444_p2;
        newsignbit_reg_713 <= p_Val2_7_fu_424_p2[32'd15];
        p_38_i_reg_733 <= p_38_i_fu_516_p2;
        p_Val2_7_reg_707 <= p_Val2_7_fu_424_p2;
        signbit_reg_701 <= p_Val2_5_fu_390_p2[32'd34];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hin_1_reg_615 <= hin_1_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((input_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_2_reg_671 <= p_Val2_2_fu_333_p2;
        p_Val2_4_reg_666 <= bias_q0;
        scale_V_reg_661 <= weight_q0;
        std_V_reg_656 <= running_std_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        p_Val2_3_reg_691 <= p_Val2_3_fu_365_p2;
        tmp_11_reg_696 <= p_Val2_3_fu_365_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        pin_1_reg_631 <= pin_1_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        r_V_reg_686 <= grp_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        win_1_reg_623 <= win_1_fu_299_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_353_ap_start = 1'b1;
    end else begin
        grp_fu_353_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_V_V_blk_n = input_V_V_empty_n;
    end else begin
        input_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        input_V_V_read = 1'b1;
    end else begin
        input_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_0_V_V_blk_n = output_0_V_V_full_n;
    end else begin
        output_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        output_0_V_V_write = 1'b1;
    end else begin
        output_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_1_V_V_blk_n = output_1_V_V_full_n;
    end else begin
        output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        output_1_V_V_write = 1'b1;
    end else begin
        output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_2_V_V_blk_n = output_2_V_V_full_n;
    end else begin
        output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        output_2_V_V_write = 1'b1;
    end else begin
        output_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        output_3_V_V_blk_n = output_3_V_V_full_n;
    end else begin
        output_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
        output_3_V_V_write = 1'b1;
    end else begin
        output_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        running_mean_ce0 = 1'b1;
    end else begin
        running_mean_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        running_std_ce0 = 1'b1;
    end else begin
        running_std_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weight_ce0 = 1'b1;
    end else begin
        weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_281_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((input_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_484_p2 = ((tmp_1_fu_474_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_490_p2 = ((tmp_1_fu_474_p4 == 11'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_fu_468_p2 = ((tmp_7_fu_458_p4 == 10'd1023) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state38 = ((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bias_address0 = tmp_fu_317_p1;

assign brmerge40_demorgan_i_fu_522_p2 = (newsignbit_fu_430_p3 & deleted_ones_fu_508_p3);

assign brmerge_i_fu_539_p2 = (p_not_i_fu_533_p2 | newsignbit_reg_713);

assign brmerge_i_i_fu_570_p2 = (underflow_fu_565_p2 | overflow_fu_549_p2);

assign carry_fu_444_p2 = (tmp_9_fu_438_p2 & tmp_12_fu_416_p3);

assign deleted_ones_fu_508_p3 = ((carry_fu_444_p2[0:0] === 1'b1) ? p_41_i_fu_502_p2 : Range1_all_ones_fu_484_p2);

assign deleted_zeros_fu_528_p3 = ((carry_reg_718[0:0] === 1'b1) ? Range1_all_ones_reg_723 : Range1_all_zeros_reg_728);

assign exitcond1_fu_281_p2 = ((hin_reg_248 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond2_fu_293_p2 = ((win_reg_259 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond_fu_305_p2 = ((pin_reg_270 == 8'd128) ? 1'b1 : 1'b0);

assign grp_fu_353_p0 = $signed(tmp_6_fu_339_p3);

assign grp_fu_353_p1 = grp_fu_353_p10;

assign grp_fu_353_p10 = std_V_reg_656;

assign hin_1_fu_287_p2 = (hin_reg_248 + 5'd1);

assign newsignbit_fu_430_p3 = p_Val2_7_fu_424_p2[32'd15];

assign out_V_fu_600_p3 = ((underflow_not_fu_581_p2[0:0] === 1'b1) ? p_Val2_7_mux_fu_586_p3 : p_Val2_7_7_fu_593_p3);

assign output_0_V_V_din = out_V_fu_600_p3;

assign output_1_V_V_din = out_V_fu_600_p3;

assign output_2_V_V_din = out_V_fu_600_p3;

assign output_3_V_V_din = out_V_fu_600_p3;

assign overflow_fu_549_p2 = (tmp_5_fu_544_p2 & brmerge_i_fu_539_p2);

assign p_38_i_fu_516_p2 = (carry_fu_444_p2 & Range1_all_ones_fu_484_p2);

assign p_41_i_fu_502_p2 = (tmp_s_fu_496_p2 & Range2_all_ones_fu_468_p2);

assign p_Val2_2_fu_333_p2 = ($signed(tmp_2_fu_325_p1) - $signed(tmp_3_fu_329_p1));

assign p_Val2_3_fu_365_p0 = r_V_reg_686;

assign p_Val2_3_fu_365_p1 = p_Val2_3_fu_365_p10;

assign p_Val2_3_fu_365_p10 = scale_V_reg_661;

assign p_Val2_3_fu_365_p2 = ($signed(p_Val2_3_fu_365_p0) * $signed({{1'b0}, {p_Val2_3_fu_365_p1}}));

assign p_Val2_5_fu_390_p2 = ($signed(tmp_4_cast_fu_386_p1) + $signed(p_Val2_3_reg_691));

assign p_Val2_6_fu_403_p4 = {{p_Val2_5_fu_390_p2[23:8]}};

assign p_Val2_7_7_fu_593_p3 = ((underflow_fu_565_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_7_reg_707);

assign p_Val2_7_fu_424_p2 = (p_Val2_6_fu_403_p4 + tmp_8_fu_413_p1);

assign p_Val2_7_mux_fu_586_p3 = ((brmerge_i_i_fu_570_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_7_reg_707);

assign p_not_i_fu_533_p2 = (deleted_zeros_fu_528_p3 ^ 1'd1);

assign pin_1_fu_311_p2 = (pin_reg_270 + 8'd1);

assign running_mean_address0 = tmp_fu_317_p1;

assign running_std_address0 = tmp_fu_317_p1;

assign tmp1_demorgan_fu_555_p2 = (p_38_i_reg_733 | brmerge40_demorgan_i_reg_739);

assign tmp1_fu_559_p2 = (tmp1_demorgan_fu_555_p2 ^ 1'd1);

assign tmp2_fu_576_p2 = (tmp_5_fu_544_p2 | brmerge40_demorgan_i_reg_739);

assign tmp_12_fu_416_p3 = p_Val2_5_fu_390_p2[32'd23];

assign tmp_14_fu_450_p3 = p_Val2_5_fu_390_p2[32'd24];

assign tmp_1_fu_474_p4 = {{p_Val2_5_fu_390_p2[34:24]}};

assign tmp_2_fu_325_p1 = $signed(input_V_V_dout);

assign tmp_3_fu_329_p1 = running_mean_q0;

assign tmp_4_cast_fu_386_p1 = $signed(tmp_4_fu_379_p3);

assign tmp_4_fu_379_p3 = {{p_Val2_4_reg_666}, {8'd0}};

assign tmp_5_fu_544_p2 = (signbit_reg_701 ^ 1'd1);

assign tmp_6_fu_339_p3 = {{p_Val2_2_reg_671}, {8'd0}};

assign tmp_7_fu_458_p4 = {{p_Val2_5_fu_390_p2[34:25]}};

assign tmp_8_fu_413_p1 = tmp_11_reg_696;

assign tmp_9_fu_438_p2 = (newsignbit_fu_430_p3 ^ 1'd1);

assign tmp_fu_317_p1 = pin_reg_270;

assign tmp_s_fu_496_p2 = (tmp_14_fu_450_p3 ^ 1'd1);

assign underflow_fu_565_p2 = (tmp1_fu_559_p2 & signbit_reg_701);

assign underflow_not_fu_581_p2 = (tmp2_fu_576_p2 | p_38_i_reg_733);

assign weight_address0 = tmp_fu_317_p1;

assign win_1_fu_299_p2 = (win_reg_259 + 5'd1);

endmodule //batch_1
