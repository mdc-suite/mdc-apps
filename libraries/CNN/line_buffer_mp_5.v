// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="line_buffer_mp_5,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=1,HLS_SYN_FF=379,HLS_SYN_LUT=1041}" *)

module line_buffer_mp_5 (
        ap_clk,
        ap_rst_n,
        input_V_V_dout,
        input_V_V_empty_n,
        input_V_V_read,
        output_V_V_din,
        output_V_V_full_n,
        output_V_V_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_pp0_stage0 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_pp1_stage0 = 10'd256;
parameter    ap_ST_fsm_state13 = 10'd512;

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_V_V_dout;
input   input_V_V_empty_n;
output   input_V_V_read;
output  [15:0] output_V_V_din;
input   output_V_V_full_n;
output   output_V_V_write;

reg input_V_V_read;
reg output_V_V_write;

reg    ap_rst_n_inv;
reg    input_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg   [0:0] out_of_bounds_reg_966;
reg    output_V_V_blk_n;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp1_stage0;
reg   [7:0] pin_reg_356;
reg   [12:0] phi_mul1_reg_367;
reg   [0:0] exitcond_flatten3_reg_440;
reg   [0:0] exitcond4_reg_451;
reg   [1:0] wkern_reg_462;
reg   [1:0] hkern_reg_473;
reg   [3:0] indvar_flatten1_reg_484;
reg   [8:0] pout_reg_495;
reg   [11:0] indvar_flatten2_reg_506;
wire   [7:0] tmp_1_fu_517_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] next_mul_fu_523_p2;
wire   [2:0] hout_mid2_fu_541_p3;
reg   [2:0] hout_mid2_reg_934;
wire    ap_CS_fsm_state3;
wire  signed [15:0] tmp_10_cast_fu_577_p1;
reg  signed [15:0] tmp_10_cast_reg_939;
wire   [5:0] indvar_flatten_next1_fu_581_p2;
reg   [5:0] indvar_flatten_next1_reg_945;
wire   [2:0] wout_mid_fu_587_p3;
reg   [2:0] wout_mid_reg_950;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_7_fu_609_p2;
reg   [5:0] tmp_7_reg_957;
wire    ap_CS_fsm_state5;
wire   [0:0] or_cond_fu_642_p2;
reg   [0:0] or_cond_reg_962;
wire   [0:0] out_of_bounds_fu_688_p2;
wire   [7:0] pin_1_fu_698_p2;
reg   [7:0] pin_1_reg_970;
reg    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [12:0] next_mul1_fu_704_p2;
reg   [12:0] next_mul1_reg_980;
wire   [63:0] tmp_22_cast_fu_720_p1;
reg   [63:0] tmp_22_cast_reg_985;
reg   [12:0] buffer_val_1_V_addr_reg_990;
reg   [12:0] buffer_val_2_V_addr_reg_996;
wire   [0:0] exitcond3_fu_726_p2;
reg   [0:0] exitcond3_reg_1002;
wire   [0:0] tmp_14_fu_732_p2;
wire    ap_CS_fsm_state8;
wire   [15:0] hin_fu_738_p2;
wire   [0:0] tmp_17_fu_745_p2;
wire   [15:0] win_fu_750_p2;
wire   [8:0] pout_mid2_fu_782_p3;
reg   [8:0] pout_mid2_reg_1024;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
reg    ap_block_state12_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [1:0] wkern_mid2_fu_802_p3;
reg   [1:0] wkern_mid2_reg_1030;
wire   [1:0] hkern_mid2_fu_810_p3;
reg   [1:0] hkern_mid2_reg_1035;
reg   [1:0] ap_reg_pp1_iter1_hkern_mid2_reg_1035;
wire   [1:0] wkern_1_fu_818_p2;
reg   [1:0] wkern_1_reg_1041;
wire   [3:0] indvar_flatten_next_fu_830_p3;
reg   [3:0] indvar_flatten_next_reg_1046;
wire   [11:0] indvar_flatten_next2_fu_838_p2;
reg   [11:0] indvar_flatten_next2_reg_1051;
wire   [0:0] exitcond_fu_844_p2;
reg   [0:0] exitcond_reg_1056;
wire   [0:0] exitcond_flatten_fu_850_p2;
reg   [0:0] exitcond_flatten_reg_1061;
wire   [0:0] exitcond_flatten2_fu_856_p2;
reg   [0:0] exitcond_flatten2_reg_1066;
wire   [2:0] wout_1_fu_895_p2;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond2_fu_900_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp1_iter1;
reg   [12:0] buffer_val_0_V_address0;
reg    buffer_val_0_V_ce0;
reg    buffer_val_0_V_we0;
wire   [15:0] buffer_val_0_V_q0;
reg   [12:0] buffer_val_1_V_address0;
reg    buffer_val_1_V_ce0;
wire   [15:0] buffer_val_1_V_q0;
reg    buffer_val_1_V_ce1;
reg    buffer_val_1_V_we1;
reg   [12:0] buffer_val_2_V_address0;
reg    buffer_val_2_V_ce0;
wire   [15:0] buffer_val_2_V_q0;
reg    buffer_val_2_V_ce1;
reg    buffer_val_2_V_we1;
reg   [7:0] tmp_reg_241;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_3_fu_529_p2;
reg   [12:0] phi_mul_reg_252;
reg   [0:0] exitcond1_reg_263;
wire   [0:0] exitcond_flatten1_fu_906_p2;
reg   [15:0] win_4_reg_402;
reg   [15:0] win_s_reg_275;
reg   [15:0] hin_4_reg_390;
reg   [15:0] hin_s_reg_287;
reg   [2:0] wout_reg_299;
reg   [2:0] hout_reg_311;
reg   [5:0] indvar_flatten_reg_322;
reg   [15:0] hin_2_reg_334;
wire    ap_CS_fsm_state9;
reg   [15:0] win_2_reg_345;
reg   [7:0] ap_phi_mux_pin_phi_fu_360_p4;
reg   [12:0] ap_phi_mux_phi_mul1_phi_fu_371_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_13_reg_378;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_13_reg_378;
reg   [15:0] hin_3_reg_415;
reg   [15:0] win_3_reg_427;
reg   [0:0] ap_phi_mux_exitcond_flatten3_phi_fu_444_p4;
reg   [0:0] ap_phi_mux_exitcond4_phi_fu_455_p4;
reg   [1:0] ap_phi_mux_wkern_phi_fu_466_p4;
reg   [1:0] ap_phi_mux_hkern_phi_fu_477_p4;
reg   [3:0] ap_phi_mux_indvar_flatten1_phi_fu_488_p4;
reg   [8:0] ap_phi_mux_pout_phi_fu_499_p4;
reg   [11:0] ap_phi_mux_indvar_flatten2_phi_fu_510_p4;
wire  signed [63:0] tmp_28_cast_fu_877_p1;
wire   [15:0] out_val_V_fu_883_p5;
reg    ap_block_pp1_stage0_01001;
wire   [2:0] hout_1_fu_535_p2;
wire   [4:0] p_shl6_fu_553_p3;
wire   [5:0] p_shl6_cast_fu_561_p1;
wire   [5:0] tmp_4_cast8_fu_549_p1;
wire   [5:0] tmp_5_fu_565_p2;
wire   [5:0] tmp_s_fu_571_p2;
wire   [4:0] p_shl_fu_598_p3;
wire   [5:0] p_shl_cast_fu_605_p1;
wire   [5:0] tmp_6_cast9_fu_595_p1;
wire   [5:0] tmp_8_fu_615_p2;
wire  signed [15:0] tmp_8_cast_fu_621_p1;
wire   [0:0] slt_fu_625_p2;
wire   [0:0] rev_fu_631_p2;
wire   [0:0] tmp_4_fu_637_p2;
wire   [0:0] tmp_2_fu_648_p3;
wire   [0:0] tmp_9_fu_656_p2;
wire   [0:0] tmp_10_fu_662_p3;
wire   [0:0] tmp_11_fu_670_p2;
wire   [0:0] tmp2_fu_682_p2;
wire   [0:0] tmp1_fu_676_p2;
wire   [13:0] phi_mul35_cast_fu_694_p1;
wire   [13:0] tmp_15_fu_710_p1;
wire   [13:0] tmp_16_fu_714_p2;
wire   [0:0] not_exitcond_flatten_fu_770_p2;
wire   [8:0] pout_1_fu_756_p2;
wire   [1:0] hkern_mid_fu_762_p3;
wire   [0:0] exitcond_mid_fu_776_p2;
wire   [0:0] tmp_18_fu_796_p2;
wire   [1:0] hkern_1_fu_790_p2;
wire   [3:0] indvar_flatten_op_fu_824_p2;
wire   [5:0] tmp_30_cast_fu_865_p1;
wire   [5:0] col_assign_fu_868_p2;
wire   [13:0] grp_fu_912_p3;
wire   [8:0] grp_fu_912_p0;
wire   [5:0] grp_fu_912_p1;
wire   [5:0] grp_fu_912_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [13:0] grp_fu_912_p00;
wire   [13:0] grp_fu_912_p20;
reg    ap_condition_124;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

line_buffer_mp_5_bkb #(
    .DataWidth( 16 ),
    .AddressRange( 5376 ),
    .AddressWidth( 13 ))
buffer_val_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_val_0_V_address0),
    .ce0(buffer_val_0_V_ce0),
    .we0(buffer_val_0_V_we0),
    .d0(buffer_val_1_V_q0),
    .q0(buffer_val_0_V_q0)
);

line_buffer_mp_5_cud #(
    .DataWidth( 16 ),
    .AddressRange( 5376 ),
    .AddressWidth( 13 ))
buffer_val_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_val_1_V_address0),
    .ce0(buffer_val_1_V_ce0),
    .q0(buffer_val_1_V_q0),
    .address1(buffer_val_1_V_addr_reg_990),
    .ce1(buffer_val_1_V_ce1),
    .we1(buffer_val_1_V_we1),
    .d1(buffer_val_2_V_q0)
);

line_buffer_mp_5_cud #(
    .DataWidth( 16 ),
    .AddressRange( 5376 ),
    .AddressWidth( 13 ))
buffer_val_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_val_2_V_address0),
    .ce0(buffer_val_2_V_ce0),
    .q0(buffer_val_2_V_q0),
    .address1(buffer_val_2_V_addr_reg_996),
    .ce1(buffer_val_2_V_ce1),
    .we1(buffer_val_2_V_we1),
    .d1(ap_phi_reg_pp0_iter1_tmp_13_reg_378)
);

line_buffer_mp_5_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
line_buffer_mp_5_eOg_U1(
    .din0(buffer_val_0_V_q0),
    .din1(buffer_val_1_V_q0),
    .din2(buffer_val_2_V_q0),
    .din3(ap_reg_pp1_iter1_hkern_mid2_reg_1035),
    .dout(out_val_V_fu_883_p5)
);

line_buffer_mp_5_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 14 ))
line_buffer_mp_5_fYi_U2(
    .din0(grp_fu_912_p0),
    .din1(grp_fu_912_p1),
    .din2(grp_fu_912_p2),
    .dout(grp_fu_912_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3_fu_726_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten2_fu_856_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_124)) begin
        if ((out_of_bounds_reg_966 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_tmp_13_reg_378 <= 16'd0;
        end else if ((out_of_bounds_reg_966 == 1'd0)) begin
            ap_phi_reg_pp0_iter1_tmp_13_reg_378 <= input_V_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_13_reg_378 <= ap_phi_reg_pp0_iter0_tmp_13_reg_378;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        exitcond1_reg_263 <= 1'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        exitcond1_reg_263 <= exitcond2_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond4_reg_451 <= exitcond_reg_1056;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        exitcond4_reg_451 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_flatten3_reg_440 <= exitcond_flatten_reg_1061;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        exitcond_flatten3_reg_440 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hin_2_reg_334 <= hin_s_reg_287;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        hin_2_reg_334 <= hin_3_reg_415;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (or_cond_reg_962 == 1'd1))) begin
        if (((tmp_17_fu_745_p2 == 1'd0) & (tmp_14_fu_732_p2 == 1'd0))) begin
            hin_3_reg_415 <= hin_fu_738_p2;
        end else if ((tmp_14_fu_732_p2 == 1'd1)) begin
            hin_3_reg_415 <= hin_2_reg_334;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        hin_4_reg_390 <= hin_2_reg_334;
    end else if (((tmp_14_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (tmp_17_fu_745_p2 == 1'd1) & (or_cond_reg_962 == 1'd1))) begin
        hin_4_reg_390 <= hin_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        hin_s_reg_287 <= 16'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        hin_s_reg_287 <= hin_4_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        hkern_reg_473 <= hkern_mid2_reg_1035;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        hkern_reg_473 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        hout_reg_311 <= 3'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        hout_reg_311 <= hout_mid2_reg_934;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten1_reg_484 <= indvar_flatten_next_reg_1046;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        indvar_flatten1_reg_484 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten2_reg_506 <= indvar_flatten_next2_reg_1051;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        indvar_flatten2_reg_506 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        indvar_flatten_reg_322 <= 6'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        indvar_flatten_reg_322 <= indvar_flatten_next1_reg_945;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phi_mul1_reg_367 <= next_mul1_reg_980;
    end else if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
        phi_mul1_reg_367 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_252 <= next_mul_fu_523_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_mul_reg_252 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_1002 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pin_reg_356 <= pin_1_reg_970;
    end else if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
        pin_reg_356 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        pout_reg_495 <= pout_mid2_reg_1024;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        pout_reg_495 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_529_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_241 <= tmp_1_fu_517_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_241 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        win_2_reg_345 <= win_s_reg_275;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        win_2_reg_345 <= win_3_reg_427;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (or_cond_reg_962 == 1'd1))) begin
        if (((tmp_17_fu_745_p2 == 1'd0) & (tmp_14_fu_732_p2 == 1'd0))) begin
            win_3_reg_427 <= 16'd0;
        end else if ((tmp_14_fu_732_p2 == 1'd1)) begin
            win_3_reg_427 <= win_fu_750_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        win_4_reg_402 <= win_2_reg_345;
    end else if (((tmp_14_fu_732_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (tmp_17_fu_745_p2 == 1'd1) & (or_cond_reg_962 == 1'd1))) begin
        win_4_reg_402 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        win_s_reg_275 <= 16'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        win_s_reg_275 <= win_4_reg_402;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        wkern_reg_462 <= wkern_1_reg_1041;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
        wkern_reg_462 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
        wout_reg_299 <= 3'd0;
    end else if (((exitcond_flatten1_fu_906_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        wout_reg_299 <= wout_1_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_reg_pp1_iter1_hkern_mid2_reg_1035 <= hkern_mid2_reg_1035;
        exitcond_flatten2_reg_1066 <= exitcond_flatten2_fu_856_p2;
        wkern_mid2_reg_1030 <= wkern_mid2_fu_802_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_1_V_addr_reg_990 <= tmp_22_cast_fu_720_p1;
        buffer_val_2_V_addr_reg_996 <= tmp_22_cast_fu_720_p1;
        exitcond3_reg_1002 <= exitcond3_fu_726_p2;
        tmp_22_cast_reg_985[13 : 0] <= tmp_22_cast_fu_720_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond_flatten_reg_1061 <= exitcond_flatten_fu_850_p2;
        exitcond_reg_1056 <= exitcond_fu_844_p2;
        hkern_mid2_reg_1035 <= hkern_mid2_fu_810_p3;
        indvar_flatten_next2_reg_1051 <= indvar_flatten_next2_fu_838_p2;
        indvar_flatten_next_reg_1046 <= indvar_flatten_next_fu_830_p3;
        pout_mid2_reg_1024 <= pout_mid2_fu_782_p3;
        wkern_1_reg_1041 <= wkern_1_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hout_mid2_reg_934 <= hout_mid2_fu_541_p3;
        indvar_flatten_next1_reg_945 <= indvar_flatten_next1_fu_581_p2;
        tmp_10_cast_reg_939 <= tmp_10_cast_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        next_mul1_reg_980 <= next_mul1_fu_704_p2;
        pin_1_reg_970 <= pin_1_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_cond_reg_962 <= or_cond_fu_642_p2;
        tmp_7_reg_957 <= tmp_7_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
        out_of_bounds_reg_966 <= out_of_bounds_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        wout_mid_reg_950 <= wout_mid_fu_587_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_exitcond4_phi_fu_455_p4 = exitcond_reg_1056;
    end else begin
        ap_phi_mux_exitcond4_phi_fu_455_p4 = exitcond4_reg_451;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_exitcond_flatten3_phi_fu_444_p4 = exitcond_flatten_reg_1061;
    end else begin
        ap_phi_mux_exitcond_flatten3_phi_fu_444_p4 = exitcond_flatten3_reg_440;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_hkern_phi_fu_477_p4 = hkern_mid2_reg_1035;
    end else begin
        ap_phi_mux_hkern_phi_fu_477_p4 = hkern_reg_473;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten1_phi_fu_488_p4 = indvar_flatten_next_reg_1046;
    end else begin
        ap_phi_mux_indvar_flatten1_phi_fu_488_p4 = indvar_flatten1_reg_484;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten2_phi_fu_510_p4 = indvar_flatten_next2_reg_1051;
    end else begin
        ap_phi_mux_indvar_flatten2_phi_fu_510_p4 = indvar_flatten2_reg_506;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_phi_mul1_phi_fu_371_p4 = next_mul1_reg_980;
    end else begin
        ap_phi_mux_phi_mul1_phi_fu_371_p4 = phi_mul1_reg_367;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1002 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_pin_phi_fu_360_p4 = pin_1_reg_970;
    end else begin
        ap_phi_mux_pin_phi_fu_360_p4 = pin_reg_356;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_pout_phi_fu_499_p4 = pout_mid2_reg_1024;
    end else begin
        ap_phi_mux_pout_phi_fu_499_p4 = pout_reg_495;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond_flatten2_reg_1066 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_wkern_phi_fu_466_p4 = wkern_1_reg_1041;
    end else begin
        ap_phi_mux_wkern_phi_fu_466_p4 = wkern_reg_462;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_val_0_V_address0 = tmp_28_cast_fu_877_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_val_0_V_address0 = tmp_22_cast_reg_985;
    end else begin
        buffer_val_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buffer_val_0_V_ce0 = 1'b1;
    end else begin
        buffer_val_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_0_V_we0 = 1'b1;
    end else begin
        buffer_val_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_val_1_V_address0 = tmp_28_cast_fu_877_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_val_1_V_address0 = tmp_22_cast_fu_720_p1;
    end else begin
        buffer_val_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buffer_val_1_V_ce0 = 1'b1;
    end else begin
        buffer_val_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_1_V_ce1 = 1'b1;
    end else begin
        buffer_val_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_1_V_we1 = 1'b1;
    end else begin
        buffer_val_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        buffer_val_2_V_address0 = tmp_28_cast_fu_877_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_val_2_V_address0 = tmp_22_cast_fu_720_p1;
    end else begin
        buffer_val_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buffer_val_2_V_ce0 = 1'b1;
    end else begin
        buffer_val_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_2_V_ce1 = 1'b1;
    end else begin
        buffer_val_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_val_2_V_we1 = 1'b1;
    end else begin
        buffer_val_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((out_of_bounds_reg_966 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_V_V_blk_n = input_V_V_empty_n;
    end else begin
        input_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_of_bounds_reg_966 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_V_V_read = 1'b1;
    end else begin
        input_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        output_V_V_blk_n = output_V_V_full_n;
    end else begin
        output_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_V_V_write = 1'b1;
    end else begin
        output_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_fu_529_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (or_cond_fu_642_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((or_cond_reg_962 == 1'd0) | ((tmp_14_fu_732_p2 == 1'd0) & (tmp_17_fu_745_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond_flatten1_fu_906_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((out_of_bounds_reg_966 == 1'd0) & (input_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((out_of_bounds_reg_966 == 1'd0) & (input_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((output_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((output_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((output_V_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1));
end

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp1_stage0_iter2 = (output_V_V_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter0 = ((out_of_bounds_reg_966 == 1'd0) & (input_V_V_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_124 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_13_reg_378 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_assign_fu_868_p2 = (tmp_7_reg_957 + tmp_30_cast_fu_865_p1);

assign exitcond2_fu_900_p2 = ((wout_1_fu_895_p2 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond3_fu_726_p2 = ((ap_phi_mux_pin_phi_fu_360_p4 == 8'd255) ? 1'b1 : 1'b0);

assign exitcond_flatten1_fu_906_p2 = ((indvar_flatten_reg_322 == 6'd48) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_856_p2 = ((ap_phi_mux_indvar_flatten2_phi_fu_510_p4 == 12'd2303) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_850_p2 = ((indvar_flatten_next_fu_830_p3 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_844_p2 = ((wkern_1_fu_818_p2 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_776_p2 = (not_exitcond_flatten_fu_770_p2 & ap_phi_mux_exitcond4_phi_fu_455_p4);

assign grp_fu_912_p0 = grp_fu_912_p00;

assign grp_fu_912_p00 = pout_mid2_reg_1024;

assign grp_fu_912_p1 = 14'd21;

assign grp_fu_912_p2 = grp_fu_912_p20;

assign grp_fu_912_p20 = col_assign_fu_868_p2;

assign hin_fu_738_p2 = (hin_2_reg_334 + 16'd1);

assign hkern_1_fu_790_p2 = (hkern_mid_fu_762_p3 + 2'd1);

assign hkern_mid2_fu_810_p3 = ((exitcond_mid_fu_776_p2[0:0] === 1'b1) ? hkern_1_fu_790_p2 : hkern_mid_fu_762_p3);

assign hkern_mid_fu_762_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_444_p4[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_hkern_phi_fu_477_p4);

assign hout_1_fu_535_p2 = (hout_reg_311 + 3'd1);

assign hout_mid2_fu_541_p3 = ((exitcond1_reg_263[0:0] === 1'b1) ? hout_1_fu_535_p2 : hout_reg_311);

assign indvar_flatten_next1_fu_581_p2 = (indvar_flatten_reg_322 + 6'd1);

assign indvar_flatten_next2_fu_838_p2 = (ap_phi_mux_indvar_flatten2_phi_fu_510_p4 + 12'd1);

assign indvar_flatten_next_fu_830_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_444_p4[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_fu_824_p2);

assign indvar_flatten_op_fu_824_p2 = (ap_phi_mux_indvar_flatten1_phi_fu_488_p4 + 4'd1);

assign next_mul1_fu_704_p2 = (13'd21 + ap_phi_mux_phi_mul1_phi_fu_371_p4);

assign next_mul_fu_523_p2 = (phi_mul_reg_252 + 13'd21);

assign not_exitcond_flatten_fu_770_p2 = (ap_phi_mux_exitcond_flatten3_phi_fu_444_p4 ^ 1'd1);

assign or_cond_fu_642_p2 = (tmp_4_fu_637_p2 | rev_fu_631_p2);

assign out_of_bounds_fu_688_p2 = (tmp2_fu_682_p2 | tmp1_fu_676_p2);

assign output_V_V_din = out_val_V_fu_883_p5;

assign p_shl6_cast_fu_561_p1 = p_shl6_fu_553_p3;

assign p_shl6_fu_553_p3 = {{hout_mid2_fu_541_p3}, {2'd0}};

assign p_shl_cast_fu_605_p1 = p_shl_fu_598_p3;

assign p_shl_fu_598_p3 = {{wout_mid_reg_950}, {2'd0}};

assign phi_mul35_cast_fu_694_p1 = ap_phi_mux_phi_mul1_phi_fu_371_p4;

assign pin_1_fu_698_p2 = (ap_phi_mux_pin_phi_fu_360_p4 + 8'd1);

assign pout_1_fu_756_p2 = (ap_phi_mux_pout_phi_fu_499_p4 + 9'd1);

assign pout_mid2_fu_782_p3 = ((ap_phi_mux_exitcond_flatten3_phi_fu_444_p4[0:0] === 1'b1) ? pout_1_fu_756_p2 : ap_phi_mux_pout_phi_fu_499_p4);

assign rev_fu_631_p2 = (slt_fu_625_p2 ^ 1'd1);

assign slt_fu_625_p2 = (($signed(tmp_8_cast_fu_621_p1) < $signed(win_2_reg_345)) ? 1'b1 : 1'b0);

assign tmp1_fu_676_p2 = (tmp_9_fu_656_p2 | tmp_2_fu_648_p3);

assign tmp2_fu_682_p2 = (tmp_11_fu_670_p2 | tmp_10_fu_662_p3);

assign tmp_10_cast_fu_577_p1 = $signed(tmp_s_fu_571_p2);

assign tmp_10_fu_662_p3 = win_2_reg_345[32'd15];

assign tmp_11_fu_670_p2 = (($signed(win_2_reg_345) > $signed(16'd20)) ? 1'b1 : 1'b0);

assign tmp_14_fu_732_p2 = (($signed(win_2_reg_345) < $signed(16'd20)) ? 1'b1 : 1'b0);

assign tmp_15_fu_710_p1 = win_2_reg_345[13:0];

assign tmp_16_fu_714_p2 = (phi_mul35_cast_fu_694_p1 + tmp_15_fu_710_p1);

assign tmp_17_fu_745_p2 = (($signed(hin_fu_738_p2) > $signed(tmp_10_cast_reg_939)) ? 1'b1 : 1'b0);

assign tmp_18_fu_796_p2 = (exitcond_mid_fu_776_p2 | ap_phi_mux_exitcond_flatten3_phi_fu_444_p4);

assign tmp_1_fu_517_p2 = (tmp_reg_241 + 8'd1);

assign tmp_22_cast_fu_720_p1 = tmp_16_fu_714_p2;

assign tmp_28_cast_fu_877_p1 = $signed(grp_fu_912_p3);

assign tmp_2_fu_648_p3 = hin_2_reg_334[32'd15];

assign tmp_30_cast_fu_865_p1 = wkern_mid2_reg_1030;

assign tmp_3_fu_529_p2 = ((tmp_reg_241 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_4_cast8_fu_549_p1 = hout_mid2_fu_541_p3;

assign tmp_4_fu_637_p2 = (($signed(hin_2_reg_334) < $signed(tmp_10_cast_reg_939)) ? 1'b1 : 1'b0);

assign tmp_5_fu_565_p2 = (p_shl6_cast_fu_561_p1 - tmp_4_cast8_fu_549_p1);

assign tmp_6_cast9_fu_595_p1 = wout_mid_reg_950;

assign tmp_7_fu_609_p2 = (p_shl_cast_fu_605_p1 - tmp_6_cast9_fu_595_p1);

assign tmp_8_cast_fu_621_p1 = $signed(tmp_8_fu_615_p2);

assign tmp_8_fu_615_p2 = (tmp_7_fu_609_p2 + 6'd2);

assign tmp_9_fu_656_p2 = (($signed(hin_2_reg_334) > $signed(16'd20)) ? 1'b1 : 1'b0);

assign tmp_s_fu_571_p2 = (tmp_5_fu_565_p2 + 6'd2);

assign win_fu_750_p2 = (win_2_reg_345 + 16'd1);

assign wkern_1_fu_818_p2 = (wkern_mid2_fu_802_p3 + 2'd1);

assign wkern_mid2_fu_802_p3 = ((tmp_18_fu_796_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wkern_phi_fu_466_p4);

assign wout_1_fu_895_p2 = (wout_mid_reg_950 + 3'd1);

assign wout_mid_fu_587_p3 = ((exitcond1_reg_263[0:0] === 1'b1) ? 3'd0 : wout_reg_299);

always @ (posedge ap_clk) begin
    tmp_22_cast_reg_985[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //line_buffer_mp_5
