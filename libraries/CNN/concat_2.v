// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="concat_2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.676000,HLS_SYN_LAT=115102,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=52,HLS_SYN_LUT=324}" *)

module concat_2 (
        ap_clk,
        ap_rst,
        input_0_V_V_dout,
        input_0_V_V_empty_n,
        input_0_V_V_read,
        input_1_V_V_dout,
        input_1_V_V_empty_n,
        input_1_V_V_read,
        input_2_V_V_dout,
        input_2_V_V_empty_n,
        input_2_V_V_read,
        input_3_V_V_dout,
        input_3_V_V_empty_n,
        input_3_V_V_read,
        output_V_V_din,
        output_V_V_full_n,
        output_V_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [15:0] input_0_V_V_dout;
input   input_0_V_V_empty_n;
output   input_0_V_V_read;
input  [15:0] input_1_V_V_dout;
input   input_1_V_V_empty_n;
output   input_1_V_V_read;
input  [15:0] input_2_V_V_dout;
input   input_2_V_V_empty_n;
output   input_2_V_V_read;
input  [15:0] input_3_V_V_dout;
input   input_3_V_V_empty_n;
output   input_3_V_V_read;
output  [15:0] output_V_V_din;
input   output_V_V_full_n;
output   output_V_V_write;

reg input_0_V_V_read;
reg input_1_V_V_read;
reg input_2_V_V_read;
reg input_3_V_V_read;
reg[15:0] output_V_V_din;
reg output_V_V_write;

reg    input_0_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_214_p2;
reg    input_1_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_226_p2;
reg    input_2_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond4_fu_238_p2;
reg    input_3_V_V_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_250_p2;
reg    output_V_V_blk_n;
wire   [8:0] j_1_fu_208_p2;
reg   [8:0] j_1_reg_265;
wire    ap_CS_fsm_state2;
wire   [6:0] i_4_fu_220_p2;
reg    ap_block_state3;
wire   [6:0] i_5_fu_232_p2;
reg    ap_block_state4;
wire   [6:0] i_6_fu_244_p2;
reg    ap_block_state5;
wire   [6:0] i_7_fu_256_p2;
reg    ap_block_state6;
reg   [8:0] j_reg_147;
wire    ap_CS_fsm_state1;
reg   [6:0] i_reg_158;
wire   [0:0] exitcond1_fu_202_p2;
reg   [6:0] i_1_reg_169;
reg   [6:0] i_2_reg_180;
reg   [6:0] i_3_reg_191;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_169 <= 7'd0;
    end else if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_169 <= i_5_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_reg_180 <= 7'd0;
    end else if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_2_reg_180 <= i_6_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_3_reg_191 <= 7'd0;
    end else if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        i_3_reg_191 <= i_7_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_158 <= 7'd0;
    end else if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_158 <= i_4_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_reg_147 <= j_1_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        j_reg_147 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_1_reg_265 <= j_1_fu_208_p2;
    end
end

always @ (*) begin
    if (((exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_V_V_blk_n = input_0_V_V_empty_n;
    end else begin
        input_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_V_V_read = 1'b1;
    end else begin
        input_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_1_V_V_blk_n = input_1_V_V_empty_n;
    end else begin
        input_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        input_1_V_V_read = 1'b1;
    end else begin
        input_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        input_2_V_V_blk_n = input_2_V_V_empty_n;
    end else begin
        input_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        input_2_V_V_read = 1'b1;
    end else begin
        input_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        input_3_V_V_blk_n = input_3_V_V_empty_n;
    end else begin
        input_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        input_3_V_V_read = 1'b1;
    end else begin
        input_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_V_V_blk_n = output_V_V_full_n;
    end else begin
        output_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        output_V_V_din = input_3_V_V_dout;
    end else if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_V_V_din = input_2_V_V_dout;
    end else if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_V_V_din = input_1_V_V_dout;
    end else if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_V_V_din = input_0_V_V_dout;
    end else begin
        output_V_V_din = 'bx;
    end
end

always @ (*) begin
    if (((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | (~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_V_V_write = 1'b1;
    end else begin
        output_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_202_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~(((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0))) & (exitcond2_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~(((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0))) & (exitcond3_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~(((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0))) & (exitcond4_fu_238_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0))) & (exitcond_fu_250_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state3 = (((exitcond2_fu_214_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond2_fu_214_p2 == 1'd0) & (input_0_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = (((exitcond3_fu_226_p2 == 1'd0) & (input_1_V_V_empty_n == 1'b0)) | ((exitcond3_fu_226_p2 == 1'd0) & (output_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5 = (((exitcond4_fu_238_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond4_fu_238_p2 == 1'd0) & (input_2_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state6 = (((exitcond_fu_250_p2 == 1'd0) & (output_V_V_full_n == 1'b0)) | ((exitcond_fu_250_p2 == 1'd0) & (input_3_V_V_empty_n == 1'b0)));
end

assign exitcond1_fu_202_p2 = ((j_reg_147 == 9'd441) ? 1'b1 : 1'b0);

assign exitcond2_fu_214_p2 = ((i_reg_158 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond3_fu_226_p2 = ((i_1_reg_169 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond4_fu_238_p2 = ((i_2_reg_180 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_250_p2 = ((i_3_reg_191 == 7'd64) ? 1'b1 : 1'b0);

assign i_4_fu_220_p2 = (i_reg_158 + 7'd1);

assign i_5_fu_232_p2 = (i_1_reg_169 + 7'd1);

assign i_6_fu_244_p2 = (i_2_reg_180 + 7'd1);

assign i_7_fu_256_p2 = (i_3_reg_191 + 7'd1);

assign j_1_fu_208_p2 = (j_reg_147 + 9'd1);

endmodule //concat_2
