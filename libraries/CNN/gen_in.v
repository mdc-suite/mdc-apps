// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gen_in,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=68}" *)

module gen_in (
        ap_clk,
        ap_rst_n,
        input_V_V_dout,
        input_V_V_empty_n,
        input_V_V_read,
        output_0_V_V_din,
        output_0_V_V_full_n,
        output_0_V_V_write,
        output_1_V_V_din,
        output_1_V_V_full_n,
        output_1_V_V_write,
        output_2_V_V_din,
        output_2_V_V_full_n,
        output_2_V_V_write,
        output_3_V_V_din,
        output_3_V_V_full_n,
        output_3_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_V_V_dout;
input   input_V_V_empty_n;
output   input_V_V_read;
output  [15:0] output_0_V_V_din;
input   output_0_V_V_full_n;
output   output_0_V_V_write;
output  [15:0] output_1_V_V_din;
input   output_1_V_V_full_n;
output   output_1_V_V_write;
output  [15:0] output_2_V_V_din;
input   output_2_V_V_full_n;
output   output_2_V_V_write;
output  [15:0] output_3_V_V_din;
input   output_3_V_V_full_n;
output   output_3_V_V_write;

reg input_V_V_read;
reg output_0_V_V_write;
reg output_1_V_V_write;
reg output_2_V_V_write;
reg output_3_V_V_write;

reg    ap_rst_n_inv;
reg    input_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    output_0_V_V_blk_n;
reg    output_1_V_V_blk_n;
reg    output_2_V_V_blk_n;
reg    output_3_V_V_blk_n;
reg    ap_block_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_V_blk_n = input_V_V_empty_n;
    end else begin
        input_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        input_V_V_read = 1'b1;
    end else begin
        input_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_0_V_V_blk_n = output_0_V_V_full_n;
    end else begin
        output_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        output_0_V_V_write = 1'b1;
    end else begin
        output_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_1_V_V_blk_n = output_1_V_V_full_n;
    end else begin
        output_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        output_1_V_V_write = 1'b1;
    end else begin
        output_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_2_V_V_blk_n = output_2_V_V_full_n;
    end else begin
        output_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        output_2_V_V_write = 1'b1;
    end else begin
        output_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_3_V_V_blk_n = output_3_V_V_full_n;
    end else begin
        output_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        output_3_V_V_write = 1'b1;
    end else begin
        output_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((output_3_V_V_full_n == 1'b0) | (output_2_V_V_full_n == 1'b0) | (output_1_V_V_full_n == 1'b0) | (output_0_V_V_full_n == 1'b0) | (input_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign output_0_V_V_din = input_V_V_dout;

assign output_1_V_V_din = input_V_V_dout;

assign output_2_V_V_din = input_V_V_dout;

assign output_3_V_V_din = input_V_V_dout;

endmodule //gen_in
